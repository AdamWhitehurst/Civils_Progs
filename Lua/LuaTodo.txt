Random idea:
Maybe have a "master" and "slave" function on the quarry shell so that you could just slave multiple turtles to be controlled by a computer. So you could push quarry configurations
 to individual turtles and view their progress through the quarry receiver.
To use keyboard shortcuts, set var = os.startTimer(num), then in event loop, check if timer is removed. Functions checking for a key will check if the var exists
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Ladders Ideas:
1. Turtle goes all the way to bottom, places ladders on the way back up
2. Turtle goes all the way to bottom, back one, then places ladders. These should be on the wall directly behind it

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
Menu API:

Ideas:
  The parameters for the menu function could be like
    title (table or string [will be turned into table])
    description (same)
    textTable
    optionsTable (all the other options, including handler functions) {OPTIONAL}
    stateTable (so that menus can be resumed where left off) {OPTIONAL}

Goals:
  Menu can run in a "window" that can be moved around
    This will involve a class of term-like functions so that the window can work right.
  ChangeableText class: Will basically be a string in a table so that other things can change it while menu is running
    Maybe have a color aspect as well? That could get complicated drawing though
  Menu items too long for one line will cut to the right length, and replace the end with "..."
  Have a popup menu function with yes/no that can be clicked or arrowed
  Menu items can be clicked to select, then clicked again to enter
  When menu is updating, it only draws the lines it needs to (but can update everything)

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Quarry Shell 1.0.0:
  Features to add:
    --Automatic Updating Interface
    --Loading options and file locations from a file
    Saving configurations and menu states
    Master and Slave program
    Installer
  
  
  Features: 
    Program that can read logs and make a configuration file to run quarry from.
    Will feature an interactive menu where you can select start quarry, make configuration file, or read logs.
    All menu items will be clickable/scrollable with mouse. Different types of menus:
      t/f can be changed with return key / arrow keys
      number can be changed with arrow keys, maybe just do a popup menu and only accept integers. Because channel 35346 will take a while to get to.
      text will open up a text box popup.
    Will feature an interactive editor for configurations. It will be just like any other menu, but will have all possible parameters. 2 options for getting these:
      1. Have a list that you make (lazy)
      2. Have it search for "addParam" functions in the program and take parameters off of them.
    Option: Either interactive editor or raw editor. Raw editor will just be a file that will be parsed and loaded as parameters.
      "Then I have a plan for making an installer that will perform various tasks like installing latest versions, 
      running pre-designated quarries (so like, load a set of parameters that you make in a file), reading quarry logs, 
      and possibly doing multiple quarries/rooms/however you use its in a row (quarry, go left 60, quarry). 
      So that will be cool."
      
    
Technical idea:
  Definitely a standard menu design. Have different types and have menu functions for up, down, enter, back, selct index. This will make the menus really cool and seamless.
  So have a menu that interacts with different menu objects that can do different things if they are selected, clicked, etc.
  
Configuration Interface Idea:
  Have main screen with all options, on the right is a smaller menu with "> run" selected, then above is "press ctrl to access menu", and below are "edit" "rename", and "delete" so user can switch modes
  Basically have another window on the right that handles cool stuff.
  
Mixing Configs and Setups:
  Configs could support a "###" operator and everything after would be a file to call and parameters. Then quarry could still load these and ignore lines started with "#"


Idea: Shell will automatically install quarry the first time run on turtle, and receiver the first time run on a computer

Maybe also it could download a few simple param things that I provide.

Idea for updates: It could download a set pastebin for "checksums" of all my programs. Then go through all of them. You could also have a "standard" pastebin to check and a "dev" pastebin
 You could possibly write yourself a python script to interact with the pastebin API and make the file for you when do a git commit.
 Maybe add entries for all the old programs as well so users can revert (?)

Another idea: Have users able to upload quarry param things to pastebin, like they could select a group of them to upload at once
 they could then download these later. They would be serialized as like a table or something.
 Each param thing would also be given a unique id to facilitate renaming them.

Also the param thing maker wizard should go through all the "addParam" functions in addition to a couple special ones that are set. So it would look for "enderchest", but would already have "manualPos" or "x"
  Maybe this could utilize the right menu to give the help listing of the parameter on the side.
  
The list of options will be alphabetically sorted and have a "search bar" at the top so when you type letters, it will add to the search box.
  Results will first give entries starting with that string, then entries containing that string

Cool idea for menus:
Have a "Settings" Page where you could change the install directory, and what you call each program. There will be a cool file browser
The file browser will be a menu, and you can have a "fileBrowser" function that takes an argument of a compareFunction. The function will only add to list of files if compare is true.
  Better yet, the menu is a ChangeableText and your event handler is given the title to update
There will also be a param for directory or file. If directory, there will be a first option which is select current. For file, you just press enter on the file.
There will be off to the right (aligned) a "<DIR>" or "-FILE-" to indicate this. The title will say file browser and the description will be the current path.
All the menus will be linked together when the function is called. The function will also have a starting path, and you have a "go up" option at the bottom unless you are at root.

Menu Plans (w/ sub menu):
  Run Default Quarry
  Configurations
    New Configuration
      Popup: Name?
      Popup: Basic or Advanced Editor
    List All Configurations
    Delete All
      Are you sure?
    --Side Menu:
      Run
      Rename
      Edit
      Delete
  Setups --This is just a simple scripting file. Like a regular lua file except that when saved, things like "&config renault&" are replaced by "shell.run("quarry", args)"
    Run
    New
    Edit
      List of Configurations
  Receiver Configs (If has wireless modem)
    Default
    Run
      Menu
    Edit
      Menu
    New
  Setup Master (If has wireless modem)
    
  Setup Slave (If has wireless modem and is turtle)
  Themes (If advanced turtle/computer) --These will load a theme for the shell or receiver.
    Shell Themes
      Menu of installed
    Receiver Themes
      Menu of installed
    Install Theme
      Popup for pastebin code
  Read Logs
    List of logs
    Delete all logs
      Are you sure?
    --Side Menu:
      Read Log
      Rename Log
      Pastebin put log
      Delete log
  Updates --If update found, will ask user if they want to overwrite files. Updates will include those to the shell itself, quarry, and quarryReceiver
    Update All
    Check Updates
    Select Updates
      Different updates possible
    Configure update source --Possibly just have this go through github. So then every new version I would push to master, then they could take dev versions from luaDev.
  Install/Register Components
    Different components not installed --Installing here would register the program name
    Register Component. If you already have "quarry" installed, register it as "quarry" here so the program knows what to run.
  Misc/Deletions
    Delete config
    Delete setup
    edit settings
    tips/help
    
Arguments:
  /run [name]: This will run the selected script instead of launching gui
  /default: Will run the default quarry

How things might work:
  Setups:
    You would go into an editor, and you could type things like "forward()" and "left()" and regular shell commands. Then have special strings denoted by a character like "&" so "&config pizza" or something that would be replaced on save by a shell string of the pizza config file.
    Another Option: Instead you could have like "face 0; go right 10; run pizza; go right 10; run pizza; go left 20" and all of those would be replaced on save by more appropriate commands and loops.
  Read Logs:
    Maybe just have it be a centered menu with no identifiers (or only a small one), so they can be scrolled and stuff.
  You could reuse both the menu API and the arguments system from other projects. Also, you may look into using your colorPrint api as well for menus It would be cool
  
  Each menu set is intricately tied with a table. e.g. The table controls all that goes on for that context menu, and just happens to have .text fields for all elements.
  The table would be passed a "parent table" by the previous menu so that each table can have a back button.
  
Way in future: Add session persistence for setups

Random future thoughts: Maybe make more seamless. Have an arg/option to make calling the program just start quarry with additional args supplied so like "shell -dim 5 5 5" would do the same as quarry

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Quarry Version 3.6.4:
  General Ideas:
    Maybe in future, option to place torches on walls efficiently
  
  
Things for 3.6.4 (after shell):
  Find out why turtle movement percent is slightly off
  Have preciseTotals send stuff back over rednet to see
  Possibly change the parameter type of enderchest and friends to just be a number. Have true return 0 or something. Then make enderChestEnabled a single variable with either the number or false.
  Add in a "lava" parameter that will ask for a bucket and will try detecting lava when it can hold enough fuel. Do note: usable lava is "minecraft:flowing_lava" metadata 0
  "I think I will indeed add in chest checking to the next version for Ore Quarries. 
      The new oreQuarry will do it automatically, but the oldOreQuarry will have a "-chest [slot]" parameter added for which slot contains the chest."
  Organize all the things! Everything is so messy right now...
  Idea for using inverted function with absolutes: Param for ignoreInverted. (Check detect functions) This allows much easier plugging in for other people (Make all main functions relative)
  
Things to add for quarry version 3.6.5:
  Add support for mods. Like open peripheral chest finding.
  Maybe have an option to change the home position. Like at 1,1,1 instead of 0,1,1. You could just replace all the "goto 1,1,1 goto 0,1,1" with a "go home" command
  
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Quarry Receiver x.x.x (matches current quarry):
  --Known Issues:
    1. Receiver cannot connect properly over repeaters with legacy on. Old quarry won't recognize new format
    2. Receiver cannot properly display the stop message for old quarries. It was sent in two different messages so it won't work
  ToDo:
    Save file to restart with
    When a monitor receives final message, have an option for removing screen or restarting and waiting for another message
    Test if themes folder would actually work
    If only one monitor is being used, computer is automatically a station.
    If preciseTotals is on, turtle can display all the values on the final screen
    "One recommendation I would have for the monitoring program when used with advanced computer or pocket computer is to have clickable buttons to pause/stop the turtle or tell it to return to home and wait." --Javatech
    
  Ideas:
  1. All themes are in files in a "themes" folder.
  11. Fun Idea: If you hit a screen, it briefly flashes in error colors "Quit Touching Meeeee!" :D That would be funny
  12. Get more default themes
  
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
Ideas for a Remote Turtle:
  Turtle will have all commands on it, not the computer
  It will also have an interpreter to interpret commands as loops.
    E.G. Computer sends "forward 34" and the turtle interprets that as "for i=1, 34 do forward() end"
  Turtle will have many different settings for things it can do. Pressing different keys will bring up context menus for different settings
  Pressing "." and "," will cycle through the turtle's different inventory slots.
  Different buttons for place, down, up, attack, etc.
  Settings:
    Aggressiveness: No attack, one attack, kill
    Detect: None, Forward, 3 side, all side (will turn around a bunch)
    Mining: Do not mine, mine blocks in front, select sides (will open up a checklist)
    Track inventory: No, Selected Slot, All Slots
    Check if item fuel: Yes, No
  Buttons:
    Forward, Backward, Turn left, Turn Right, Up, Down
    Attack, Up, Down
    Dig, Up, Down
    Place, Up, Down
    Drop, Up, Down
    Refuel from slot
    Refuel all
    Open Console
  Maybe ability to switch between different turtles with another button.
  Maybe turtle will maintain a record of its detects and everywhere its been. Then you could make a map :D
  
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Idea for a track layer:

Interface:
  Turtle will read track parameters from a file. The program will parse the file and record how much it has done for persistence.
  Files will read something like this: In this example, we want regular and powered tracks placed along a route, with torches placed periodically and redstone torches placed under the powered rails.
    define redstone 3 1 1 --redstone torches are type 3 in ender chest id 1 slot 1(for narcissistic turtles)
    define torch 4 1 2 --torches are type 4 in ender chest id 1 slot 2
    define rail 1 1 3-7 --rail type 1 is in ender chest 1 slots 3 through 7
    define rail 2 1 8-10 powered --rail type 2 is in ender chest 1 slots 8-9
    forward 100 3 2 15 1 --Go forward 100 blocks, alternating 3 track of type 2 and 15 track of type 1
    zigzag 20 1 1 --Do the "zigzag" function with repeating 1 track of type 1
    slope 20 5 up 4 1 1 2 --Slope function (maybe just pass the last arguments to move function), 20 blocks long, 1 block for every 5 blocks forward with 4 regular tracks, then a powered track
    


Function:
  The turtle will first parse the specified configuration as a set of directions.
  Core concepts:
    Turtle will keep track of inventory (maybe not use full stacks of items for keeping purposes)
    Turtle will have an ender chest to obtain resupplies (test if you can keep one item, then just pull all from chest)
      If above does not work properly, turtle may be narcissistic and pull items from certain slots
    Turtle will work out where it needs to place redstone torches for optimum powered rail coverage, and will smartly place them (know when it can't)
    File making system will be awesome, and may eventually have a GUI for making track systems.
    Just make the system as robust as possible.

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
 
Plans for a tower program:
Make a program that fills in an X x Z x Until it hits ground hole. Will turn around, go up a certain number, then back one, then down until hits bottom, back up, place a block, and go up. Repeat this until gets to x. If last point will end in a down then will go to the bottom and place up. Keeps track of coordinates to go back to start.
Prolly just going to scrap this

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Plans for a Redstone Control Station:
Basically, make an api table that only has one function. This function returns an object that has all of the necessary methods for returning values and making new indexes. In the object, each numbered value will be a table that has paramaters for:
Title, default redstone, "On" text, "Off" text, color of title, background color of title, pulse t/f, pulse duration, cable color, and a "current" value, which is just redstone true of false right now.
The actual program will handle stuff like key presses, scrolling, adjusting redstone, and updating the screen.

Cool mockup in the notebook in your backpack.

Each item will be brought in from an external file in a folder. These files will be sandboxed and spawn in a list object that will be inserted into the full list

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Ideas for minecraft word:
  Completely separate the data from the visual. The data will contain all of the lines (separated by line breaks), and the visual will handle printing it in a formatted way for reading.
  Some day...
  
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Idea for a mod pack
  Make it so every installer adds its own entry into the versions json, and records it in the modpacks folder
  Make it so the mod switcher also switches the active profile to whatever was selected
  Make a mod pack maker :)

  Mod Pack Downloader:
  Make a python script that will download mods from a list of urls on pastebin
  The pastebin will be updated regularly by another python script
  So when they start it up, it will check the pastebin, compare it to the mods already had (maybe), then download new mods and put them in the right folder.
