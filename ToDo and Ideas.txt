-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Changelog so far:
  Added aliases:
    help: ?
    restore: resume
  Added in optional GPS capability to start up more reliably
  Fixed logic in the "up" function preventing it from continuing on getting stuck

Things to add for quarry version 3.2.0:

  Cool Idea: Option to log mining runs. E.g. The size, blocks mined, and what type. File in human-readable format.
  Store them in a folder and label them sequentially
  
  Consolidate Mining Loops
  
  Insert a sleep(0) in the loop for filesaving
  
  Change the fs.open("w") to a "w+" so it can use the previous location if write fails.

  Do something about how attack compensates for invert off the bat, but Move is compensated for in the implementation.
  
  Change fuel checking from a pcall to check if returns "unlimited" instead

  Smart-Refuel: Will take one piece of the fuel to gauge how much it will need. It will then consume as much of the stack as needed. If needed is greater than a stack, it will first consume the stack, and then tell the user how many more stacks it needs, and will loop through the filled slots to consume (nearly) precisely how much fuel it needs

  Make sure that you are only doing the "raise" value for fuel when it is below "needed"
  
Things to add for quarry version 3.2.1:
  Use "for" loops for gps location checking on successful backup read

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
  
Things to add for next rednet version:

Program will just register items to display on receive. It will then print them in order if there is room. Each element will be a table containing the original value, the short value, the medium value,
 the long value, and a table containing the screenX required for all sizes. Maybe also have a priority (e.g. priority 1 will always disply, then priority two will display, then priority 3 will display if there is room.

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
 
Plans for a tower program:
Make a program that fills in an X x Z x Until it hits ground hole. Will turn around, go up a certain number, then back one, then down until hits bottom, back up, place a block, and go up. Repeat this until gets to x. If last point will end in a down then will go to the bottom and place up. Keeps track of coordinates to go back to start.

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Plans for a Redstone Control Station:
Basically, make an api table that only has one function. This function returns an object that has all of the necessary methods for returning values and making new indexes. In the object, each numbered value will be a table that has paramaters for:
Title, default redstone, "On" text, "Off" text, color of title, background color of title, pulse t/f, pulse duration, cable color, and a "current" value, which is just redstone true of false right now.
The actual program will handle stuff like key presses, scrolling, adjusting redstone, and updating the screen.

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

Ideas for minecraft word:
  Completely seperate the data from the visual. The data will conatain all of the lines (seperated by line breaks), and the visual will handle printing it in a formatted way for reading.

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
  
Ideas for TTTClick:
  Using SysPrint(once it is done), make a menu that the program will come back to once it is done with a game/ at start of game.